library(stringr)
library('party')
library('caret')
library("ROCR")
#read the data
train.data<-read.csv("train.csv",na.strings=c("NA",""))
#check str of data
str(train.data)
#convert survived and PClass to factors
train.data$Survived=factor(train.data$Survived)
train.data$PassengerId=factor(train.data$PassengerId)
#check str of data
str(train.data)
#count # of missing data
sum(is.na(train.data$Age)==TRUE)
#impute missing values
#assign mean age for a missing value:
mean.mr = mean(train.data$Age[grepl(" Mr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.mrs = mean(train.data$Age[grepl(" Mrs\\.", train.data$Name) & !is.na(train.data$Age)])
mean.dr = mean(train.data$Age[grepl(" Dr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" Miss\\.", train.data$Name) & !is.na(train.data$Age)])
mean.master =  mean(train.data$Age[grepl(" Master\\.", train.data$Name) & !is.na(train.data$Age)])

train.data$Age[grepl(" Mr\\.", train.data$Name) & is.na(train.data$Age)] = mean.mr
train.data$Age[grepl(" Mrs\\.", train.data$Name) & is.na(train.data$Age)] = mean.mrs
train.data$Age[grepl(" Dr\\.", train.data$Name) & is.na(train.data$Age)] = mean.dr
train.data$Age[grepl(" Miss\\.", train.data$Name) & is.na(train.data$Age)] = mean.miss
train.data$Age[grepl(" Master\\.", train.data$Name) & is.na(train.data$Age)] = mean.master
train.data$Name=as.character(train.data$Name)
#visualize the data
barplot(table(train.data$Survived),main="Passenger Survival",names=c("P","S"))
barplot(table(train.data$Pclass),main="Passenger class",names=c("I","II","III"))
barplot(table(train.data$Sex), main="Passenger Gender")
#visualize passenger survival by sex
survS = table( train.data$Survived, train.data$Sex)
barplot(survS,  col=c("blue","green"), legend = c("P", "S"), main = "Survival by classSex")
#visualize passenger survival by class
survC = table( train.data$Survived, train.data$Pclass)
barplot(survC,  col=c("blue","green"), legend = c("P", "S"), main = "Survival by class")
#************************************************************
#prediction using decision tree
#*******************************************
#split the data into train and set
split.data=function(data,p=0.7,s=777)
{
  set.seed(s)
  index=sample(2,nrow(data),replace=TRUE,prob=c(p,1-p))
  train=data[index==1,]
  test=data[index==2,]
  return(list(train=train,test=test))
}
data.set<-split.data(train.data)
train.set<-data.set$train
test.set<-data.set$test
#use conditional interference tree
fit.ctree<-ctree(Survived~Pclass+Sex+Age, data=train.set)
#predict
ctree.predict<-predict(fit.ctree,test.set)
confusionMatrix(ctree.predict,test.set$Survived)

train.ctree = ctree(Survived ~ Pclass + Sex + Age + SibSp + Fare + Parch, data=trainset)
#predict
ctree.predict<-predict(fit.ctree,test.set)
confusionMatrix(ctree.predict,test.set$Survived)

train.ctree.pred = predict(fit.ctree, train.set)
train.ctree.prob =  1- unlist(treeresponse(train.ctree, test.set), use.names=F)[seq(1,nrow(test.set)*2,2)]

#ROCR prediction object from probabilities:
train.ctree.prob.rocr = prediction(train.ctree.prob, test.set$Survived)
#Prepare the ROCR performance object for the ROC curve (tpr=true positive rate, fpr=false positive rate) and the area under curve (AUC):
train.ctree.perf = performance(train.ctree.prob.rocr, "tpr","fpr")
train.ctree.auc.perf =  performance(train.ctree.prob.rocr, measure = "auc", x.measure = "cutoff")
plot(train.ctree.perf, col=2,colorize=T, main=paste("AUC:", train.ctree.auc.perf@y.values))

#3***********************************************************
  #using recursive partioning tree
fit.rpart<-rpart(Survived~Pclass+Sex+Age,data=train.set)
#predict
pred<-predict(fit.rpart,test.set,type="class")
confusionMatrix(pred,test.set$Survived)
